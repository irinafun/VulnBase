from spider.config.expilot_db import ARCHIEVE_URL, ARCHIEVE_PATH, ARCHIEVE_FILE, ARCHIEVE_DIR
from spider.utils.logger import Logger
import os
import os.path
import wget
import zipfile
import csv
import shutil

vuln_reference_map = {}

class ExploitDB:
    @staticmethod
    def init():
        """
        Get exploit-db archieve file
        """
        try:
            # check if exploit-db has been downloaded
            if not os.path.exists(ARCHIEVE_PATH) or not os.path.exists(os.path.join(ARCHIEVE_PATH, ARCHIEVE_FILE)):
                # download exploit-db
                Logger.info('Downloading exploit-db...')
                # create cache folder
                os.makedirs(ARCHIEVE_PATH, exist_ok=True)
                # download exploit-db
                wget.download(ARCHIEVE_URL, os.path.join(ARCHIEVE_PATH, ARCHIEVE_FILE))
                Logger.info('Downloaded exploit-db')
            else:
                Logger.info('Exploit-db has been downloaded')
        except:
            Logger.error('Failed to download exploit-db')
            raise

        try:
            # check if exploit-db has been extracted
            if not os.path.exists(os.path.join(ARCHIEVE_PATH, ARCHIEVE_DIR)):
                # extract exploit-db
                Logger.info('Extracting exploit-db...')
                # extract exploit-db
                with zipfile.ZipFile(os.path.join(ARCHIEVE_PATH, ARCHIEVE_FILE), 'r') as zip_ref:
                    zip_ref.extractall(os.path.join(ARCHIEVE_PATH, "temp"))
                
                # get directory name in the root directory
                root_dir = os.listdir(os.path.join(ARCHIEVE_PATH, "temp"))[0]
                # move files to root directory
                shutil.move(os.path.join(ARCHIEVE_PATH, "temp", root_dir), os.path.join(ARCHIEVE_PATH, ARCHIEVE_DIR))
                Logger.info('Extracted exploit-db')
            else:
                Logger.info('Exploit-db has been extracted')
        except:
            Logger.error('Failed to extract exploit-db')
            raise

        # read csv
        Logger.info('Reading exploit-db csv...')
        with open(os.path.join(ARCHIEVE_PATH, ARCHIEVE_DIR, 'files_exploits.csv'), newline='', encoding='utf-8') as csvfile:
            reader = csv.DictReader(csvfile)
            for row in reader:
                codes = row['codes'].split(';')
                if len(codes) > 0:
                    for code in codes:
                        vuln_reference_map[code] = {
                            'id': row['id'],
                            'description': row['description'],
                            'file': row['file'],
                            'date': row['date_published'],
                            'author': row['author'],
                            'platform': row['platform'],
                            'type': row['type'],
                        }
        Logger.info('Read exploit-db csv success')
        Logger.info('Exploit-db init success, got %d exploits' % len(vuln_reference_map))
    
    @staticmethod
    def get_exploit(code):
        # replace _ with -, replace lowercase with uppercase
        code = code.replace('_', '-').upper()
        if code in vuln_reference_map:
            return vuln_reference_map[code]
        else:
            return None
    
    @staticmethod
    def get_exploit_file(file) -> str:
        with open(os.path.join(ARCHIEVE_PATH, ARCHIEVE_DIR, file), 'r') as f:
            return f.read()